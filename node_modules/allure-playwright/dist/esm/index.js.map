{"version":3,"file":"index.js","names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","next","_toArray","_arrayWithHoles","_iterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","constructor","name","from","test","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","has","_toPrimitive","_typeof","toPrimitive","String","Number","_assertClassBrand","existsSync","access","path","process","ContentType","LabelName","LinkType","Stage","Status","extractMetadataFromString","getMessageAndTraceFromError","getMetadataLabel","hasLabel","stripAnsi","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","ReporterRuntime","ShallowStepsStack","createDefaultWriter","createStepResult","escapeRegExp","formatLink","getEnvironmentLabels","getFrameworkLabel","getHostLabel","getLanguageLabel","getPackageLabel","getThreadLabel","getWorstTestStepResult","md5","parseTestPlan","randomUuid","readImageAsBase64","allurePlaywrightLegacyApi","AFTER_HOOKS_ROOT_STEP_TITLE","BEFORE_HOOKS_ROOT_STEP_TITLE","diffEndRegexp","isAfterHookStep","isBeforeHookStep","isDescendantOfStepWithTitle","normalizeHookTitle","statusToAllureStats","_AllureReporter_brand","WeakSet","AllureReporter","config","Date","Map","WeakMap","options","suiteTitle","detail","onConfigure","outputDir","projects","snapshotDir","testPlan","configElement","testsWithSelectors","tests","selector","v1ReporterTests","v2ReporterTests","cliArgs","selectorToGrepPattern","normalize","concat","v2SelectorsArgs","map","replace","v1SelectorsArgs","split","onError","onExit","onStdErr","onStdOut","onBegin","suite","allureRuntime","writer","resultsDir","onTestBegin","parent","titleMetadata","title","project","testFilePath","relative","testDir","location","file","relativeFileParts","sep","relativeFile","join","_suite$titlePath","titlePath","_suite$titlePath2","suiteTitles","nameSuites","testCaseIdBase","result","cleanTitle","labels","links","parameters","steps","testCaseId","fullName","line","column","_ref","tags","tag","TAG","startsWith","substring","_iterator","annotations","_step","annotation","type","_this$options$links","ISSUE","url","description","_this$options$links2","TMS","annotationLabel","status","PASSED","stage","FINISHED","attachments","statusDetails","err","repeatEach","repeatEachIndex","testUuid","startTest","allureResultsUuids","set","id","startedTestCasesTitlesCache","onStepBegin","_result","step","_this$pwStepUuid$get","isRootBeforeHook","isRootAfterHook","isRootHook","isBeforeHookDescendant","isAfterHookDescendant","isHookStep","get","includes","category","_this$allureRuntime","_this$attachmentSteps","currentStep","attachmentSteps","_shouldIgnoreStep","baseStep","start","startTime","getTime","RUNNING","uuid","stack","beforeHooksStepsStack","afterHooksStepsStack","startStep","attachStack","beforeHooksAttachmentsStack","afterHooksAttachmentsStack","updateStep","stepResult","_attachStack$get","stopStep","parentUuid","pwStepUuid","createdUuid","onStepEnd","isAfterHook","isHook","_getWorstTestStepResu","_ref2","_ref2$status","error","FAILED","duration","stepUuid","_getWorstTestStepResu2","_ref3","_ref3$status","_onTestEnd","_callee","_this","_this$beforeHooksAtta","_this$afterHooksAttac","_this$attachmentSteps2","threadId","thread","_test$parent$titlePat","_test$parent$titlePat2","projectSuiteTitle","fileSuiteTitle","beforeHooksStack","afterHooksStack","attachmentsInBeforeHooks","attachmentsInAfterHooks","attachmentToStepMap","attachmentIndex","_iterator2","_step2","_hookStep","_iterator3","_step3","_iterator4","_step4","_hookStep2","attachment","stepInfo","_i","_attachment","_stepInfo","hookStep","isBeforeHook","targetStack","fileName","_context","parallelIndex","undefined","workerIndex","pid","updateTest","testResult","PARENT_SUITE","SUITE","SUB_SUITE","_test$annotations","skipReason","find","message","expectedStatus","processAttachment","stdout","writeAttachment","Buffer","contentType","TEXT","stderr","findStepByUuid","addAttachment","source","mappedLabels","reduce","acc","label","newLabels","flatMap","labelName","labelsGroup","_testResult$steps","unshift","_testResult$steps2","stopTest","writeTest","onTestEnd","_x","_x2","_addSkippedResults","_callee2","_this2","unprocessedCases","_iterator5","_step5","testCase","_t","_context2","allTests","_ref4","SKIPPED","errors","retry","globalStartTime","addSkippedResults","_onEnd","_callee3","_context3","writeEnvironmentInfo","writeCategoriesDefinitions","onEnd","printsToStdio","processStepMetadataMessage","attachmentStepUuid","_message$data","data","_message$data$paramet","_step$parameters","_processAttachment","_callee6","_replace","allureRuntimeMessage","pathWithoutEndFromSnapshotDir","pathWithoutEnd","fileExists","readImageFromDirs","actualBase64","expectedBase64","diffBase64","diffName","_context6","body","JSON","parse","applyRuntimeMessages","match","processedDiffs","_ref5","_callee4","filePath","_context4","_x6","_ref6","_callee5","modifier","defaultPath","snapshotPath","_context5","_x7","stringify","expected","actual","diff","IMAGEDIFF","fileExtension","_x3","_x4","_x5","version","allure","expect"],"sources":["../../src/index.ts"],"sourcesContent":["/* eslint max-lines: off */\nimport type { FullConfig } from \"@playwright/test\";\nimport type { TestResult as PlaywrightTestResult, Suite, TestCase, TestStep } from \"@playwright/test/reporter\";\nimport { existsSync } from \"node:fs\";\nimport { access } from \"node:fs/promises\";\nimport path from \"node:path\";\nimport process from \"node:process\";\nimport {\n  ContentType,\n  type ImageDiffAttachment,\n  type Label,\n  LabelName,\n  LinkType,\n  Stage,\n  Status,\n  type StepResult,\n  type TestResult,\n} from \"allure-js-commons\";\nimport type { RuntimeMessage, RuntimeStepMetadataMessage, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport {\n  extractMetadataFromString,\n  getMessageAndTraceFromError,\n  getMetadataLabel,\n  hasLabel,\n  stripAnsi,\n} from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  ReporterRuntime,\n  ShallowStepsStack,\n  createDefaultWriter,\n  createStepResult,\n  escapeRegExp,\n  formatLink,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getThreadLabel,\n  getWorstTestStepResult,\n  md5,\n  parseTestPlan,\n  randomUuid,\n  readImageAsBase64,\n} from \"allure-js-commons/sdk/reporter\";\nimport { allurePlaywrightLegacyApi } from \"./legacy.js\";\nimport type { AllurePlaywrightReporterConfig, AttachStack, ReporterV2 } from \"./model.js\";\nimport {\n  AFTER_HOOKS_ROOT_STEP_TITLE,\n  BEFORE_HOOKS_ROOT_STEP_TITLE,\n  diffEndRegexp,\n  isAfterHookStep,\n  isBeforeHookStep,\n  isDescendantOfStepWithTitle,\n  normalizeHookTitle,\n  statusToAllureStats,\n} from \"./utils.js\";\n\nexport class AllureReporter implements ReporterV2 {\n  config!: FullConfig;\n  suite!: Suite;\n  options: AllurePlaywrightReporterConfig;\n  outputDir: string | undefined;\n  snapshotDir: string | undefined;\n\n  private allureRuntime: ReporterRuntime | undefined;\n  private globalStartTime = new Date();\n  private processedDiffs: string[] = [];\n  private readonly startedTestCasesTitlesCache: string[] = [];\n  private readonly allureResultsUuids: Map<string, string> = new Map();\n  private readonly attachmentSteps: Map<string, (string | undefined)[]> = new Map();\n  private beforeHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private afterHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private beforeHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n  private afterHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n  private readonly pwStepUuid = new WeakMap<TestStep, string>();\n\n  constructor(config: AllurePlaywrightReporterConfig) {\n    this.options = { suiteTitle: true, detail: true, ...config };\n  }\n\n  onConfigure(config: FullConfig): void {\n    this.config = config;\n    this.outputDir = config.projects[0].outputDir;\n    this.snapshotDir = config.projects[0].snapshotDir;\n\n    const testPlan = parseTestPlan();\n\n    if (!testPlan) {\n      return;\n    }\n\n    // @ts-ignore\n    const configElement = config[Object.getOwnPropertySymbols(config)[0]];\n\n    if (!configElement) {\n      return;\n    }\n\n    const testsWithSelectors = testPlan.tests.filter((test) => test.selector);\n    const v1ReporterTests: TestPlanV1Test[] = [];\n    const v2ReporterTests: TestPlanV1Test[] = [];\n    const cliArgs: string[] = [];\n\n    testsWithSelectors.forEach((test) => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      if (!/#/.test(test.selector!)) {\n        v2ReporterTests.push(test);\n        return;\n      }\n\n      v1ReporterTests.push(test);\n    });\n\n    // The path needs to be specific to the current OS. Otherwise, it may not match against the test file.\n    const selectorToGrepPattern = (selector: string) => escapeRegExp(path.normalize(`/${selector}`));\n\n    if (v2ReporterTests.length) {\n      // we need to cut off column because playwright works only with line number\n      const v2SelectorsArgs = v2ReporterTests\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.replace(/:\\d+$/, \"\"))\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v2SelectorsArgs);\n    }\n\n    if (v1ReporterTests.length) {\n      const v1SelectorsArgs = v1ReporterTests\n        // we can filter tests only by absolute path, so we need to cut off test name\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.split(\"#\")[0])\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v1SelectorsArgs);\n    }\n\n    if (!cliArgs.length) {\n      return;\n    }\n\n    configElement.cliArgs = cliArgs;\n  }\n\n  onError(): void {}\n\n  onExit(): void {}\n\n  onStdErr(): void {}\n\n  onStdOut(): void {}\n\n  onBegin(suite: Suite): void {\n    this.suite = suite;\n    this.allureRuntime = new ReporterRuntime({\n      ...this.options,\n      writer: createDefaultWriter({ resultsDir: this.options.resultsDir }),\n    });\n  }\n\n  onTestBegin(test: TestCase) {\n    const suite = test.parent;\n    const titleMetadata = extractMetadataFromString(test.title);\n    const project = suite.project()!;\n    const testFilePath = path.relative(project?.testDir, test.location.file);\n    const relativeFileParts = testFilePath.split(path.sep);\n    const relativeFile = relativeFileParts.join(\"/\");\n    // root > project > file path > test.describe...\n    const [, , , ...suiteTitles] = suite.titlePath();\n    const nameSuites = suiteTitles.length > 0 ? `${suiteTitles.join(\" \")} ` : \"\";\n    const testCaseIdBase = `${relativeFile}#${nameSuites}${test.title}`;\n    const result: Partial<TestResult> = {\n      name: titleMetadata.cleanTitle,\n      labels: [...titleMetadata.labels, ...getEnvironmentLabels()],\n      links: [...titleMetadata.links],\n      parameters: [],\n      steps: [],\n      testCaseId: md5(testCaseIdBase),\n      fullName: `${relativeFile}:${test.location.line}:${test.location.column}`,\n      titlePath: relativeFileParts.concat(...suiteTitles),\n    };\n\n    result.labels!.push(getLanguageLabel());\n    result.labels!.push(getFrameworkLabel(\"playwright\"));\n    result.labels!.push(getPackageLabel(testFilePath));\n    result.labels!.push({ name: \"titlePath\", value: suite.titlePath().join(\" > \") });\n\n    // support for earlier playwright versions\n    if (\"tags\" in test) {\n      const tags: Label[] = test.tags.map((tag) => ({\n        name: LabelName.TAG,\n        value: tag.startsWith(\"@\") ? tag.substring(1) : tag,\n      }));\n      result.labels!.push(...tags);\n    }\n\n    if (\"annotations\" in test) {\n      for (const annotation of test.annotations) {\n        if (annotation.type === \"skip\" || annotation.type === \"fixme\") {\n          continue;\n        }\n\n        if (annotation.type === \"issue\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.ISSUE,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"tms\" || annotation.type === \"test_key\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.TMS,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"description\") {\n          result.description = annotation.description;\n          continue;\n        }\n\n        const annotationLabel = getMetadataLabel(annotation.type, annotation.description);\n\n        if (annotationLabel) {\n          result.labels!.push(annotationLabel);\n          continue;\n        }\n\n        result.steps!.push({\n          name: `${annotation.type}: ${annotation.description!}`,\n          status: Status.PASSED,\n          stage: Stage.FINISHED,\n          parameters: [],\n          steps: [],\n          attachments: [],\n          statusDetails: {},\n        });\n      }\n    }\n\n    if (project?.name) {\n      result.parameters!.push({ name: \"Project\", value: project.name });\n    }\n\n    if (project?.repeatEach > 1) {\n      result.parameters!.push({ name: \"Repetition\", value: `${test.repeatEachIndex + 1}` });\n    }\n\n    const testUuid = this.allureRuntime!.startTest(result);\n\n    this.allureResultsUuids.set(test.id, testUuid);\n    this.startedTestCasesTitlesCache.push(titleMetadata.cleanTitle);\n  }\n\n  #shouldIgnoreStep(step: TestStep) {\n    if (!this.options.detail && step.category !== \"test.step\") {\n      return true;\n    }\n\n    // ignore noisy route.continue()\n    if (step.category === \"pw:api\" && step.title === \"route.continue()\") {\n      return true;\n    }\n\n    // playwright doesn't report this step\n    if (step.title === \"Worker Cleanup\" || isDescendantOfStepWithTitle(step, \"Worker Cleanup\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onStepBegin(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isRootHook = isRootBeforeHook || isRootAfterHook;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isHookStep = isBeforeHookDescendant || isAfterHookDescendant;\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n\n    if ([\"test.attach\", \"attach\"].includes(step.category) && !isHookStep) {\n      const currentStep = this.allureRuntime?.currentStep(testUuid);\n      this.attachmentSteps.set(testUuid, [...(this.attachmentSteps.get(testUuid) ?? []), currentStep]);\n      return;\n    }\n\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n\n    const baseStep: StepResult = {\n      ...createStepResult(),\n      name: step.title,\n      start: step.startTime.getTime(),\n      stage: Stage.RUNNING,\n      uuid: randomUuid(),\n    };\n\n    if (isHookStep) {\n      const stack = isBeforeHookDescendant\n        ? this.beforeHooksStepsStack.get(test.id)!\n        : this.afterHooksStepsStack.get(test.id)!;\n\n      if ([\"test.attach\", \"attach\"].includes(step.category)) {\n        stack.startStep(baseStep);\n\n        const attachStack = isBeforeHookDescendant ? this.beforeHooksAttachmentsStack : this.afterHooksAttachmentsStack;\n\n        stack.updateStep((stepResult) => {\n          stepResult.name = normalizeHookTitle(stepResult.name!);\n          stepResult.stage = Stage.FINISHED;\n          attachStack.set(test.id, [...(attachStack.get(test.id) ?? []), { ...step, uuid: stepResult.uuid as string }]);\n        });\n        stack.stopStep();\n        return;\n      }\n      stack.startStep(baseStep);\n      return;\n    }\n\n    if (isRootHook) {\n      const stack = new ShallowStepsStack();\n      stack.startStep(baseStep);\n      if (isRootBeforeHook) {\n        this.beforeHooksStepsStack.set(test.id, stack);\n      } else {\n        this.afterHooksStepsStack.set(test.id, stack);\n      }\n      return;\n    }\n    const parentUuid = step.parent ? this.pwStepUuid.get(step.parent) ?? null : null;\n    const createdUuid = this.allureRuntime!.startStep(testUuid, parentUuid, baseStep);\n\n    if (createdUuid) {\n      this.pwStepUuid.set(step, createdUuid);\n    }\n  }\n\n  onStepEnd(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n    // ignore test.attach steps since attachments are already in the report\n    if ([\"test.attach\", \"attach\"].includes(step.category)) {\n      return;\n    }\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isAfterHook = isRootAfterHook || isAfterHookDescendant;\n    const isHook = isRootBeforeHook || isRootAfterHook || isBeforeHookDescendant || isAfterHookDescendant;\n\n    if (isHook) {\n      const stack = isAfterHook ? this.afterHooksStepsStack.get(test.id)! : this.beforeHooksStepsStack.get(test.id)!;\n\n      stack.updateStep((stepResult) => {\n        const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n        stepResult.status = step.error ? Status.FAILED : status;\n        stepResult.stage = Stage.FINISHED;\n        if (step.error) {\n          stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n        }\n      });\n      stack.stopStep({\n        duration: step.duration,\n      });\n      return;\n    }\n\n    const currentStep = this.allureRuntime!.currentStep(testUuid);\n\n    if (!currentStep) {\n      return;\n    }\n\n    const stepUuid = this.pwStepUuid.get(step);\n    if (!stepUuid) {\n      return;\n    }\n\n    this.allureRuntime!.updateStep(stepUuid, (stepResult) => {\n      const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n      stepResult.status = step.error ? Status.FAILED : status;\n      stepResult.stage = Stage.FINISHED;\n      if (step.error) {\n        stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n      }\n    });\n    this.allureRuntime!.stopStep(stepUuid, { duration: step.duration });\n  }\n\n  async onTestEnd(test: TestCase, result: PlaywrightTestResult) {\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    // We need to check parallelIndex first because pw introduced this field only in v1.30.0\n    const threadId = result.parallelIndex !== undefined ? result.parallelIndex : result.workerIndex;\n    const thread = `pid-${process.pid}-worker-${threadId}`;\n    const error = result.error;\n    // only apply default suites if not set by user\n    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = test.parent.titlePath();\n    const beforeHooksStack = this.beforeHooksStepsStack.get(test.id);\n    const afterHooksStack = this.afterHooksStepsStack.get(test.id);\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      testResult.labels.push(getHostLabel());\n      testResult.labels.push(getThreadLabel(thread));\n\n      if (projectSuiteTitle && !hasLabel(testResult, LabelName.PARENT_SUITE)) {\n        testResult.labels.push({ name: LabelName.PARENT_SUITE, value: projectSuiteTitle });\n      }\n\n      if (this.options.suiteTitle && fileSuiteTitle && !hasLabel(testResult, LabelName.SUITE)) {\n        testResult.labels.push({ name: LabelName.SUITE, value: fileSuiteTitle });\n      }\n\n      if (suiteTitles.length > 0 && !hasLabel(testResult, LabelName.SUB_SUITE)) {\n        testResult.labels.push({ name: LabelName.SUB_SUITE, value: suiteTitles.join(\" > \") });\n      }\n\n      if (error) {\n        testResult.statusDetails = { ...getMessageAndTraceFromError(error) };\n      } else {\n        const skipReason = test.annotations?.find(\n          (annotation) => annotation.type === \"skip\" || annotation.type === \"fixme\",\n        )?.description;\n\n        if (skipReason) {\n          testResult.statusDetails = { ...testResult.statusDetails, message: skipReason };\n        }\n      }\n\n      testResult.status = statusToAllureStats(result.status, test.expectedStatus);\n      testResult.stage = Stage.FINISHED;\n    });\n\n    const attachmentsInBeforeHooks = this.beforeHooksAttachmentsStack.get(test.id) ?? [];\n    const attachmentsInAfterHooks = this.afterHooksAttachmentsStack.get(test.id) ?? [];\n    const attachmentSteps = this.attachmentSteps.get(testUuid) ?? [];\n\n    const attachmentToStepMap = new Map<number, { stepUuid?: string; isHook: boolean; hookStep?: AttachStack }>();\n\n    let attachmentIndex = 0;\n\n    for (const hookStep of attachmentsInBeforeHooks) {\n      attachmentToStepMap.set(attachmentIndex, {\n        stepUuid: hookStep.uuid,\n        isHook: true,\n        hookStep,\n      });\n      attachmentIndex++;\n    }\n\n    for (const stepUuid of attachmentSteps) {\n      attachmentToStepMap.set(attachmentIndex, {\n        stepUuid,\n        isHook: false,\n      });\n      attachmentIndex++;\n    }\n\n    for (const hookStep of attachmentsInAfterHooks) {\n      attachmentToStepMap.set(attachmentIndex, {\n        stepUuid: hookStep.uuid,\n        isHook: true,\n        hookStep,\n      });\n      attachmentIndex++;\n    }\n\n    for (let i = 0; i < result.attachments.length; i++) {\n      const attachment = result.attachments[i];\n      const stepInfo = attachmentToStepMap.get(i);\n\n      if (stepInfo?.isHook) {\n        continue;\n      } else if (stepInfo?.stepUuid) {\n        await this.processAttachment(testUuid, stepInfo.stepUuid, attachment);\n      } else {\n        await this.processAttachment(testUuid, undefined, attachment);\n      }\n    }\n\n    if (result.stdout.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stdout\",\n        Buffer.from(stripAnsi(result.stdout.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    if (result.stderr.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stderr\",\n        Buffer.from(stripAnsi(result.stderr.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    // FIXME: temp logic for labels override, we need it here to keep the reporter compatible with v2 API\n    // in next iterations we need to implement the logic for every javascript integration\n\n    for (let i = 0; i < result.attachments.length; i++) {\n      const attachment = result.attachments[i];\n      const stepInfo = attachmentToStepMap.get(i);\n\n      if (stepInfo?.isHook && stepInfo.hookStep) {\n        const hookStep = stepInfo.hookStep;\n        const isBeforeHook = attachmentsInBeforeHooks.includes(hookStep);\n        const targetStack = isBeforeHook ? beforeHooksStack : afterHooksStack;\n\n        if (attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE) {\n          await this.processAttachment(testUuid, hookStep.uuid, attachment);\n          continue;\n        }\n\n        if (targetStack) {\n          const stepResult = targetStack.findStepByUuid(hookStep.uuid);\n          if (stepResult) {\n            const fileName = targetStack.addAttachment(attachment, this.allureRuntime!.writer);\n            stepResult.attachments.push({\n              name: attachment.name,\n              type: attachment.contentType,\n              source: fileName,\n            });\n          }\n        }\n      }\n    }\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      const mappedLabels = testResult.labels.reduce<Record<string, Label[]>>((acc, label) => {\n        if (!acc[label.name]) {\n          acc[label.name] = [];\n        }\n\n        acc[label.name].push(label);\n\n        return acc;\n      }, {});\n      const newLabels = Object.keys(mappedLabels).flatMap((labelName) => {\n        const labelsGroup = mappedLabels[labelName];\n\n        if (\n          labelName === LabelName.SUITE ||\n          labelName === LabelName.PARENT_SUITE ||\n          labelName === LabelName.SUB_SUITE\n        ) {\n          return labelsGroup.slice(-1);\n        }\n\n        return labelsGroup;\n      });\n\n      if (beforeHooksStack) {\n        testResult.steps.unshift(...beforeHooksStack.steps);\n        this.beforeHooksStepsStack.delete(test.id);\n      }\n\n      if (afterHooksStack) {\n        testResult.steps.push(...afterHooksStack.steps);\n        this.afterHooksStepsStack.delete(test.id);\n      }\n\n      testResult.labels = newLabels;\n    });\n    this.allureRuntime!.stopTest(testUuid, { duration: result.duration });\n    this.allureRuntime!.writeTest(testUuid);\n  }\n\n  async addSkippedResults() {\n    const unprocessedCases = this.suite.allTests().filter(({ title }) => {\n      const titleMetadata = extractMetadataFromString(title);\n\n      return !this.startedTestCasesTitlesCache.includes(titleMetadata.cleanTitle);\n    });\n\n    for (const testCase of unprocessedCases) {\n      this.onTestBegin(testCase);\n      await this.onTestEnd(testCase, {\n        status: Status.SKIPPED,\n        attachments: [],\n        duration: 0,\n        errors: [],\n        parallelIndex: 0,\n        workerIndex: 0,\n        retry: 0,\n        steps: [],\n        stderr: [],\n        stdout: [],\n        startTime: this.globalStartTime,\n        annotations: [],\n      });\n    }\n  }\n\n  async onEnd() {\n    await this.addSkippedResults();\n\n    this.allureRuntime!.writeEnvironmentInfo();\n    this.allureRuntime!.writeCategoriesDefinitions();\n  }\n\n  printsToStdio(): boolean {\n    return false;\n  }\n\n  private processStepMetadataMessage(attachmentStepUuid: string, message: RuntimeStepMetadataMessage) {\n    const { name, parameters = [] } = message.data;\n\n    this.allureRuntime!.updateStep(attachmentStepUuid, (step) => {\n      if (name) {\n        step.name = name;\n      }\n\n      step.parameters.push(...parameters);\n    });\n  }\n\n  private async processAttachment(\n    testUuid: string,\n    attachmentStepUuid: string | undefined,\n    attachment: {\n      name: string;\n      contentType: string;\n      path?: string;\n      body?: Buffer;\n    },\n  ) {\n    if (!attachment.body && !attachment.path) {\n      return;\n    }\n\n    const allureRuntimeMessage = attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE;\n\n    if (allureRuntimeMessage && !attachment.body) {\n      return;\n    }\n\n    if (allureRuntimeMessage) {\n      const message = JSON.parse(attachment.body!.toString()) as RuntimeMessage;\n\n      if (message.type === \"step_metadata\") {\n        this.processStepMetadataMessage(attachmentStepUuid!, message);\n        return;\n      }\n\n      this.allureRuntime!.applyRuntimeMessages(testUuid, [message]);\n      return;\n    }\n\n    const parentUuid = this.allureRuntime!.startStep(testUuid, attachmentStepUuid, { name: attachment.name });\n\n    // only stop if step is created. Step may not be created only if test with specified uuid doesn't exists.\n    // usually, missing test by uuid means we should completely skip result processing;\n    // the later operations are safe and will only produce console warnings\n    if (parentUuid) {\n      this.allureRuntime!.stopStep(parentUuid, undefined);\n    }\n\n    if (attachment.body) {\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.body, {\n        contentType: attachment.contentType,\n      });\n    } else if (!existsSync(attachment.path!)) {\n      return;\n    } else {\n      const contentType =\n        attachment.name === \"trace\" && attachment.contentType === \"application/zip\"\n          ? \"application/vnd.allure.playwright-trace\"\n          : attachment.contentType;\n\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.path!, {\n        contentType,\n      });\n    }\n\n    if (!attachment.name.match(diffEndRegexp)) {\n      return;\n    }\n\n    const pathWithoutEndFromSnapshotDir = attachment\n      .path!.replace(this.outputDir!, this.snapshotDir!)\n      ?.replace(diffEndRegexp, \"\")\n      .replace(/\\.png/, \"\");\n\n    const pathWithoutEnd = attachment.path!.replace(diffEndRegexp, \"\").replace(/\\.png/, \"\");\n\n    if (this.processedDiffs.includes(pathWithoutEnd) || this.processedDiffs.includes(pathWithoutEndFromSnapshotDir)) {\n      return;\n    }\n    const fileExists = async (filePath: string) => {\n      return await access(filePath)\n        .then(() => true)\n        .catch(() => false);\n    };\n\n    const readImageFromDirs = async (modifier: \"actual\" | \"expected\" | \"diff\") => {\n      const defaultPath = `${pathWithoutEnd}-${modifier}.png`;\n      const snapshotPath = `${pathWithoutEndFromSnapshotDir}-${modifier}.png`;\n      if (await fileExists(defaultPath)) {\n        return await readImageAsBase64(defaultPath);\n      }\n      if (await fileExists(snapshotPath)) {\n        return await readImageAsBase64(snapshotPath);\n      }\n      return undefined;\n    };\n\n    const actualBase64 = await readImageFromDirs(\"actual\");\n    const expectedBase64 = await readImageFromDirs(\"expected\");\n    const diffBase64 = await readImageFromDirs(\"diff\");\n\n    const diffName = attachment.name.replace(diffEndRegexp, \"\");\n\n    this.allureRuntime!.writeAttachment(\n      testUuid,\n      undefined,\n      diffName,\n      Buffer.from(\n        JSON.stringify({\n          expected: expectedBase64,\n          actual: actualBase64,\n          diff: diffBase64,\n          name: diffName,\n        } as ImageDiffAttachment),\n        \"utf-8\",\n      ),\n      {\n        contentType: ContentType.IMAGEDIFF,\n        fileExtension: \".imagediff\",\n      },\n    );\n\n    this.processedDiffs.push(pathWithoutEnd);\n  }\n\n  version(): \"v2\" {\n    return \"v2\";\n  }\n}\n\n/**\n * @deprecated for removal, import functions directly from \"allure-js-commons\".\n */\nexport const allure = allurePlaywrightLegacyApi;\n\n/**\n * @deprecated for removal, import functions directly from \"@playwright/test\".\n */\nexport { test, expect } from \"@playwright/test\";\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}