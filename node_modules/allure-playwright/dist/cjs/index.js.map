{"version":3,"file":"index.js","names":["_nodeFs","require","_promises","_nodePath","_interopRequireDefault","_nodeProcess","_allureJsCommons","_sdk","_reporter","_legacy","_utils","_test","e","__esModule","_regenerator","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","next","_toArray","_arrayWithHoles","_iterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","constructor","name","from","test","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","has","_toPrimitive","_typeof","toPrimitive","String","Number","_assertClassBrand","_AllureReporter_brand","WeakSet","AllureReporter","exports","config","Date","Map","WeakMap","options","suiteTitle","detail","onConfigure","outputDir","projects","snapshotDir","testPlan","parseTestPlan","configElement","testsWithSelectors","tests","selector","v1ReporterTests","v2ReporterTests","cliArgs","selectorToGrepPattern","escapeRegExp","path","normalize","concat","v2SelectorsArgs","map","replace","v1SelectorsArgs","split","onError","onExit","onStdErr","onStdOut","onBegin","suite","allureRuntime","ReporterRuntime","writer","createDefaultWriter","resultsDir","onTestBegin","parent","titleMetadata","extractMetadataFromString","title","project","testFilePath","relative","testDir","location","file","relativeFileParts","sep","relativeFile","join","_suite$titlePath","titlePath","_suite$titlePath2","suiteTitles","nameSuites","testCaseIdBase","result","cleanTitle","labels","getEnvironmentLabels","links","parameters","steps","testCaseId","md5","fullName","line","column","getLanguageLabel","getFrameworkLabel","getPackageLabel","_ref","tags","tag","LabelName","TAG","startsWith","substring","_iterator","annotations","_step","annotation","type","_this$options$links","formatLink","LinkType","ISSUE","url","description","_this$options$links2","TMS","annotationLabel","getMetadataLabel","status","Status","PASSED","stage","Stage","FINISHED","attachments","statusDetails","err","repeatEach","repeatEachIndex","testUuid","startTest","allureResultsUuids","set","id","startedTestCasesTitlesCache","onStepBegin","_result","step","_this$pwStepUuid$get","isRootBeforeHook","BEFORE_HOOKS_ROOT_STEP_TITLE","isRootAfterHook","AFTER_HOOKS_ROOT_STEP_TITLE","isRootHook","isBeforeHookDescendant","isBeforeHookStep","isAfterHookDescendant","isAfterHookStep","isHookStep","get","includes","category","_this$allureRuntime","_this$attachmentSteps","currentStep","attachmentSteps","_shouldIgnoreStep","baseStep","createStepResult","start","startTime","getTime","RUNNING","uuid","randomUuid","stack","beforeHooksStepsStack","afterHooksStepsStack","startStep","attachStack","beforeHooksAttachmentsStack","afterHooksAttachmentsStack","updateStep","stepResult","_attachStack$get","normalizeHookTitle","stopStep","ShallowStepsStack","parentUuid","pwStepUuid","createdUuid","onStepEnd","isAfterHook","isHook","_getWorstTestStepResu","_ref2","getWorstTestStepResult","_ref2$status","error","FAILED","getMessageAndTraceFromError","duration","stepUuid","_getWorstTestStepResu2","_ref3","_ref3$status","_onTestEnd","_callee","_this","_this$beforeHooksAtta","_this$afterHooksAttac","_this$attachmentSteps2","threadId","thread","_test$parent$titlePat","_test$parent$titlePat2","projectSuiteTitle","fileSuiteTitle","beforeHooksStack","afterHooksStack","attachmentsInBeforeHooks","attachmentsInAfterHooks","attachmentToStepMap","attachmentIndex","_iterator2","_step2","_hookStep","_iterator3","_step3","_iterator4","_step4","_hookStep2","attachment","stepInfo","_i","_attachment","_stepInfo","hookStep","isBeforeHook","targetStack","fileName","_context","parallelIndex","undefined","workerIndex","process","pid","updateTest","testResult","getHostLabel","getThreadLabel","hasLabel","PARENT_SUITE","SUITE","SUB_SUITE","_test$annotations","skipReason","find","message","statusToAllureStats","expectedStatus","processAttachment","stdout","writeAttachment","Buffer","stripAnsi","contentType","ContentType","TEXT","stderr","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","findStepByUuid","addAttachment","source","mappedLabels","reduce","acc","label","newLabels","flatMap","labelName","labelsGroup","_testResult$steps","unshift","_testResult$steps2","stopTest","writeTest","onTestEnd","_x","_x2","_addSkippedResults","_callee2","_this2","unprocessedCases","_iterator5","_step5","testCase","_t","_context2","allTests","_ref4","SKIPPED","errors","retry","globalStartTime","addSkippedResults","_onEnd","_callee3","_context3","writeEnvironmentInfo","writeCategoriesDefinitions","onEnd","printsToStdio","processStepMetadataMessage","attachmentStepUuid","_message$data","data","_message$data$paramet","_step$parameters","_processAttachment","_callee6","_replace","allureRuntimeMessage","pathWithoutEndFromSnapshotDir","pathWithoutEnd","fileExists","readImageFromDirs","actualBase64","expectedBase64","diffBase64","diffName","_context6","body","JSON","parse","applyRuntimeMessages","existsSync","match","diffEndRegexp","processedDiffs","_ref5","_callee4","filePath","_context4","access","_x6","_ref6","_callee5","modifier","defaultPath","snapshotPath","_context5","readImageAsBase64","_x7","stringify","expected","actual","diff","IMAGEDIFF","fileExtension","_x3","_x4","_x5","version","isDescendantOfStepWithTitle","allure","allurePlaywrightLegacyApi","_default"],"sources":["../../src/index.ts"],"sourcesContent":["/* eslint max-lines: off */\nimport type { FullConfig } from \"@playwright/test\";\nimport type { TestResult as PlaywrightTestResult, Suite, TestCase, TestStep } from \"@playwright/test/reporter\";\nimport { existsSync } from \"node:fs\";\nimport { access } from \"node:fs/promises\";\nimport path from \"node:path\";\nimport process from \"node:process\";\nimport {\n  ContentType,\n  type ImageDiffAttachment,\n  type Label,\n  LabelName,\n  LinkType,\n  Stage,\n  Status,\n  type StepResult,\n  type TestResult,\n} from \"allure-js-commons\";\nimport type { RuntimeMessage, RuntimeStepMetadataMessage, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport {\n  extractMetadataFromString,\n  getMessageAndTraceFromError,\n  getMetadataLabel,\n  hasLabel,\n  stripAnsi,\n} from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  ReporterRuntime,\n  ShallowStepsStack,\n  createDefaultWriter,\n  createStepResult,\n  escapeRegExp,\n  formatLink,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getThreadLabel,\n  getWorstTestStepResult,\n  md5,\n  parseTestPlan,\n  randomUuid,\n  readImageAsBase64,\n} from \"allure-js-commons/sdk/reporter\";\nimport { allurePlaywrightLegacyApi } from \"./legacy.js\";\nimport type { AllurePlaywrightReporterConfig, AttachStack, ReporterV2 } from \"./model.js\";\nimport {\n  AFTER_HOOKS_ROOT_STEP_TITLE,\n  BEFORE_HOOKS_ROOT_STEP_TITLE,\n  diffEndRegexp,\n  isAfterHookStep,\n  isBeforeHookStep,\n  isDescendantOfStepWithTitle,\n  normalizeHookTitle,\n  statusToAllureStats,\n} from \"./utils.js\";\n\nexport class AllureReporter implements ReporterV2 {\n  config!: FullConfig;\n  suite!: Suite;\n  options: AllurePlaywrightReporterConfig;\n  outputDir: string | undefined;\n  snapshotDir: string | undefined;\n\n  private allureRuntime: ReporterRuntime | undefined;\n  private globalStartTime = new Date();\n  private processedDiffs: string[] = [];\n  private readonly startedTestCasesTitlesCache: string[] = [];\n  private readonly allureResultsUuids: Map<string, string> = new Map();\n  private readonly attachmentSteps: Map<string, (string | undefined)[]> = new Map();\n  private beforeHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private afterHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private beforeHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n  private afterHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n  private readonly pwStepUuid = new WeakMap<TestStep, string>();\n\n  constructor(config: AllurePlaywrightReporterConfig) {\n    this.options = { suiteTitle: true, detail: true, ...config };\n  }\n\n  onConfigure(config: FullConfig): void {\n    this.config = config;\n    this.outputDir = config.projects[0].outputDir;\n    this.snapshotDir = config.projects[0].snapshotDir;\n\n    const testPlan = parseTestPlan();\n\n    if (!testPlan) {\n      return;\n    }\n\n    // @ts-ignore\n    const configElement = config[Object.getOwnPropertySymbols(config)[0]];\n\n    if (!configElement) {\n      return;\n    }\n\n    const testsWithSelectors = testPlan.tests.filter((test) => test.selector);\n    const v1ReporterTests: TestPlanV1Test[] = [];\n    const v2ReporterTests: TestPlanV1Test[] = [];\n    const cliArgs: string[] = [];\n\n    testsWithSelectors.forEach((test) => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      if (!/#/.test(test.selector!)) {\n        v2ReporterTests.push(test);\n        return;\n      }\n\n      v1ReporterTests.push(test);\n    });\n\n    // The path needs to be specific to the current OS. Otherwise, it may not match against the test file.\n    const selectorToGrepPattern = (selector: string) => escapeRegExp(path.normalize(`/${selector}`));\n\n    if (v2ReporterTests.length) {\n      // we need to cut off column because playwright works only with line number\n      const v2SelectorsArgs = v2ReporterTests\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.replace(/:\\d+$/, \"\"))\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v2SelectorsArgs);\n    }\n\n    if (v1ReporterTests.length) {\n      const v1SelectorsArgs = v1ReporterTests\n        // we can filter tests only by absolute path, so we need to cut off test name\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.split(\"#\")[0])\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v1SelectorsArgs);\n    }\n\n    if (!cliArgs.length) {\n      return;\n    }\n\n    configElement.cliArgs = cliArgs;\n  }\n\n  onError(): void {}\n\n  onExit(): void {}\n\n  onStdErr(): void {}\n\n  onStdOut(): void {}\n\n  onBegin(suite: Suite): void {\n    this.suite = suite;\n    this.allureRuntime = new ReporterRuntime({\n      ...this.options,\n      writer: createDefaultWriter({ resultsDir: this.options.resultsDir }),\n    });\n  }\n\n  onTestBegin(test: TestCase) {\n    const suite = test.parent;\n    const titleMetadata = extractMetadataFromString(test.title);\n    const project = suite.project()!;\n    const testFilePath = path.relative(project?.testDir, test.location.file);\n    const relativeFileParts = testFilePath.split(path.sep);\n    const relativeFile = relativeFileParts.join(\"/\");\n    // root > project > file path > test.describe...\n    const [, , , ...suiteTitles] = suite.titlePath();\n    const nameSuites = suiteTitles.length > 0 ? `${suiteTitles.join(\" \")} ` : \"\";\n    const testCaseIdBase = `${relativeFile}#${nameSuites}${test.title}`;\n    const result: Partial<TestResult> = {\n      name: titleMetadata.cleanTitle,\n      labels: [...titleMetadata.labels, ...getEnvironmentLabels()],\n      links: [...titleMetadata.links],\n      parameters: [],\n      steps: [],\n      testCaseId: md5(testCaseIdBase),\n      fullName: `${relativeFile}:${test.location.line}:${test.location.column}`,\n      titlePath: relativeFileParts.concat(...suiteTitles),\n    };\n\n    result.labels!.push(getLanguageLabel());\n    result.labels!.push(getFrameworkLabel(\"playwright\"));\n    result.labels!.push(getPackageLabel(testFilePath));\n    result.labels!.push({ name: \"titlePath\", value: suite.titlePath().join(\" > \") });\n\n    // support for earlier playwright versions\n    if (\"tags\" in test) {\n      const tags: Label[] = test.tags.map((tag) => ({\n        name: LabelName.TAG,\n        value: tag.startsWith(\"@\") ? tag.substring(1) : tag,\n      }));\n      result.labels!.push(...tags);\n    }\n\n    if (\"annotations\" in test) {\n      for (const annotation of test.annotations) {\n        if (annotation.type === \"skip\" || annotation.type === \"fixme\") {\n          continue;\n        }\n\n        if (annotation.type === \"issue\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.ISSUE,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"tms\" || annotation.type === \"test_key\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.TMS,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"description\") {\n          result.description = annotation.description;\n          continue;\n        }\n\n        const annotationLabel = getMetadataLabel(annotation.type, annotation.description);\n\n        if (annotationLabel) {\n          result.labels!.push(annotationLabel);\n          continue;\n        }\n\n        result.steps!.push({\n          name: `${annotation.type}: ${annotation.description!}`,\n          status: Status.PASSED,\n          stage: Stage.FINISHED,\n          parameters: [],\n          steps: [],\n          attachments: [],\n          statusDetails: {},\n        });\n      }\n    }\n\n    if (project?.name) {\n      result.parameters!.push({ name: \"Project\", value: project.name });\n    }\n\n    if (project?.repeatEach > 1) {\n      result.parameters!.push({ name: \"Repetition\", value: `${test.repeatEachIndex + 1}` });\n    }\n\n    const testUuid = this.allureRuntime!.startTest(result);\n\n    this.allureResultsUuids.set(test.id, testUuid);\n    this.startedTestCasesTitlesCache.push(titleMetadata.cleanTitle);\n  }\n\n  #shouldIgnoreStep(step: TestStep) {\n    if (!this.options.detail && step.category !== \"test.step\") {\n      return true;\n    }\n\n    // ignore noisy route.continue()\n    if (step.category === \"pw:api\" && step.title === \"route.continue()\") {\n      return true;\n    }\n\n    // playwright doesn't report this step\n    if (step.title === \"Worker Cleanup\" || isDescendantOfStepWithTitle(step, \"Worker Cleanup\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onStepBegin(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isRootHook = isRootBeforeHook || isRootAfterHook;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isHookStep = isBeforeHookDescendant || isAfterHookDescendant;\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n\n    if ([\"test.attach\", \"attach\"].includes(step.category) && !isHookStep) {\n      const currentStep = this.allureRuntime?.currentStep(testUuid);\n      this.attachmentSteps.set(testUuid, [...(this.attachmentSteps.get(testUuid) ?? []), currentStep]);\n      return;\n    }\n\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n\n    const baseStep: StepResult = {\n      ...createStepResult(),\n      name: step.title,\n      start: step.startTime.getTime(),\n      stage: Stage.RUNNING,\n      uuid: randomUuid(),\n    };\n\n    if (isHookStep) {\n      const stack = isBeforeHookDescendant\n        ? this.beforeHooksStepsStack.get(test.id)!\n        : this.afterHooksStepsStack.get(test.id)!;\n\n      if ([\"test.attach\", \"attach\"].includes(step.category)) {\n        stack.startStep(baseStep);\n\n        const attachStack = isBeforeHookDescendant ? this.beforeHooksAttachmentsStack : this.afterHooksAttachmentsStack;\n\n        stack.updateStep((stepResult) => {\n          stepResult.name = normalizeHookTitle(stepResult.name!);\n          stepResult.stage = Stage.FINISHED;\n          attachStack.set(test.id, [...(attachStack.get(test.id) ?? []), { ...step, uuid: stepResult.uuid as string }]);\n        });\n        stack.stopStep();\n        return;\n      }\n      stack.startStep(baseStep);\n      return;\n    }\n\n    if (isRootHook) {\n      const stack = new ShallowStepsStack();\n      stack.startStep(baseStep);\n      if (isRootBeforeHook) {\n        this.beforeHooksStepsStack.set(test.id, stack);\n      } else {\n        this.afterHooksStepsStack.set(test.id, stack);\n      }\n      return;\n    }\n    const parentUuid = step.parent ? this.pwStepUuid.get(step.parent) ?? null : null;\n    const createdUuid = this.allureRuntime!.startStep(testUuid, parentUuid, baseStep);\n\n    if (createdUuid) {\n      this.pwStepUuid.set(step, createdUuid);\n    }\n  }\n\n  onStepEnd(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n    // ignore test.attach steps since attachments are already in the report\n    if ([\"test.attach\", \"attach\"].includes(step.category)) {\n      return;\n    }\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isAfterHook = isRootAfterHook || isAfterHookDescendant;\n    const isHook = isRootBeforeHook || isRootAfterHook || isBeforeHookDescendant || isAfterHookDescendant;\n\n    if (isHook) {\n      const stack = isAfterHook ? this.afterHooksStepsStack.get(test.id)! : this.beforeHooksStepsStack.get(test.id)!;\n\n      stack.updateStep((stepResult) => {\n        const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n        stepResult.status = step.error ? Status.FAILED : status;\n        stepResult.stage = Stage.FINISHED;\n        if (step.error) {\n          stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n        }\n      });\n      stack.stopStep({\n        duration: step.duration,\n      });\n      return;\n    }\n\n    const currentStep = this.allureRuntime!.currentStep(testUuid);\n\n    if (!currentStep) {\n      return;\n    }\n\n    const stepUuid = this.pwStepUuid.get(step);\n    if (!stepUuid) {\n      return;\n    }\n\n    this.allureRuntime!.updateStep(stepUuid, (stepResult) => {\n      const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n      stepResult.status = step.error ? Status.FAILED : status;\n      stepResult.stage = Stage.FINISHED;\n      if (step.error) {\n        stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n      }\n    });\n    this.allureRuntime!.stopStep(stepUuid, { duration: step.duration });\n  }\n\n  async onTestEnd(test: TestCase, result: PlaywrightTestResult) {\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    // We need to check parallelIndex first because pw introduced this field only in v1.30.0\n    const threadId = result.parallelIndex !== undefined ? result.parallelIndex : result.workerIndex;\n    const thread = `pid-${process.pid}-worker-${threadId}`;\n    const error = result.error;\n    // only apply default suites if not set by user\n    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = test.parent.titlePath();\n    const beforeHooksStack = this.beforeHooksStepsStack.get(test.id);\n    const afterHooksStack = this.afterHooksStepsStack.get(test.id);\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      testResult.labels.push(getHostLabel());\n      testResult.labels.push(getThreadLabel(thread));\n\n      if (projectSuiteTitle && !hasLabel(testResult, LabelName.PARENT_SUITE)) {\n        testResult.labels.push({ name: LabelName.PARENT_SUITE, value: projectSuiteTitle });\n      }\n\n      if (this.options.suiteTitle && fileSuiteTitle && !hasLabel(testResult, LabelName.SUITE)) {\n        testResult.labels.push({ name: LabelName.SUITE, value: fileSuiteTitle });\n      }\n\n      if (suiteTitles.length > 0 && !hasLabel(testResult, LabelName.SUB_SUITE)) {\n        testResult.labels.push({ name: LabelName.SUB_SUITE, value: suiteTitles.join(\" > \") });\n      }\n\n      if (error) {\n        testResult.statusDetails = { ...getMessageAndTraceFromError(error) };\n      } else {\n        const skipReason = test.annotations?.find(\n          (annotation) => annotation.type === \"skip\" || annotation.type === \"fixme\",\n        )?.description;\n\n        if (skipReason) {\n          testResult.statusDetails = { ...testResult.statusDetails, message: skipReason };\n        }\n      }\n\n      testResult.status = statusToAllureStats(result.status, test.expectedStatus);\n      testResult.stage = Stage.FINISHED;\n    });\n\n    const attachmentsInBeforeHooks = this.beforeHooksAttachmentsStack.get(test.id) ?? [];\n    const attachmentsInAfterHooks = this.afterHooksAttachmentsStack.get(test.id) ?? [];\n    const attachmentSteps = this.attachmentSteps.get(testUuid) ?? [];\n\n    const attachmentToStepMap = new Map<number, { stepUuid?: string; isHook: boolean; hookStep?: AttachStack }>();\n\n    let attachmentIndex = 0;\n\n    for (const hookStep of attachmentsInBeforeHooks) {\n      attachmentToStepMap.set(attachmentIndex, {\n        stepUuid: hookStep.uuid,\n        isHook: true,\n        hookStep,\n      });\n      attachmentIndex++;\n    }\n\n    for (const stepUuid of attachmentSteps) {\n      attachmentToStepMap.set(attachmentIndex, {\n        stepUuid,\n        isHook: false,\n      });\n      attachmentIndex++;\n    }\n\n    for (const hookStep of attachmentsInAfterHooks) {\n      attachmentToStepMap.set(attachmentIndex, {\n        stepUuid: hookStep.uuid,\n        isHook: true,\n        hookStep,\n      });\n      attachmentIndex++;\n    }\n\n    for (let i = 0; i < result.attachments.length; i++) {\n      const attachment = result.attachments[i];\n      const stepInfo = attachmentToStepMap.get(i);\n\n      if (stepInfo?.isHook) {\n        continue;\n      } else if (stepInfo?.stepUuid) {\n        await this.processAttachment(testUuid, stepInfo.stepUuid, attachment);\n      } else {\n        await this.processAttachment(testUuid, undefined, attachment);\n      }\n    }\n\n    if (result.stdout.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stdout\",\n        Buffer.from(stripAnsi(result.stdout.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    if (result.stderr.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stderr\",\n        Buffer.from(stripAnsi(result.stderr.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    // FIXME: temp logic for labels override, we need it here to keep the reporter compatible with v2 API\n    // in next iterations we need to implement the logic for every javascript integration\n\n    for (let i = 0; i < result.attachments.length; i++) {\n      const attachment = result.attachments[i];\n      const stepInfo = attachmentToStepMap.get(i);\n\n      if (stepInfo?.isHook && stepInfo.hookStep) {\n        const hookStep = stepInfo.hookStep;\n        const isBeforeHook = attachmentsInBeforeHooks.includes(hookStep);\n        const targetStack = isBeforeHook ? beforeHooksStack : afterHooksStack;\n\n        if (attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE) {\n          await this.processAttachment(testUuid, hookStep.uuid, attachment);\n          continue;\n        }\n\n        if (targetStack) {\n          const stepResult = targetStack.findStepByUuid(hookStep.uuid);\n          if (stepResult) {\n            const fileName = targetStack.addAttachment(attachment, this.allureRuntime!.writer);\n            stepResult.attachments.push({\n              name: attachment.name,\n              type: attachment.contentType,\n              source: fileName,\n            });\n          }\n        }\n      }\n    }\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      const mappedLabels = testResult.labels.reduce<Record<string, Label[]>>((acc, label) => {\n        if (!acc[label.name]) {\n          acc[label.name] = [];\n        }\n\n        acc[label.name].push(label);\n\n        return acc;\n      }, {});\n      const newLabels = Object.keys(mappedLabels).flatMap((labelName) => {\n        const labelsGroup = mappedLabels[labelName];\n\n        if (\n          labelName === LabelName.SUITE ||\n          labelName === LabelName.PARENT_SUITE ||\n          labelName === LabelName.SUB_SUITE\n        ) {\n          return labelsGroup.slice(-1);\n        }\n\n        return labelsGroup;\n      });\n\n      if (beforeHooksStack) {\n        testResult.steps.unshift(...beforeHooksStack.steps);\n        this.beforeHooksStepsStack.delete(test.id);\n      }\n\n      if (afterHooksStack) {\n        testResult.steps.push(...afterHooksStack.steps);\n        this.afterHooksStepsStack.delete(test.id);\n      }\n\n      testResult.labels = newLabels;\n    });\n    this.allureRuntime!.stopTest(testUuid, { duration: result.duration });\n    this.allureRuntime!.writeTest(testUuid);\n  }\n\n  async addSkippedResults() {\n    const unprocessedCases = this.suite.allTests().filter(({ title }) => {\n      const titleMetadata = extractMetadataFromString(title);\n\n      return !this.startedTestCasesTitlesCache.includes(titleMetadata.cleanTitle);\n    });\n\n    for (const testCase of unprocessedCases) {\n      this.onTestBegin(testCase);\n      await this.onTestEnd(testCase, {\n        status: Status.SKIPPED,\n        attachments: [],\n        duration: 0,\n        errors: [],\n        parallelIndex: 0,\n        workerIndex: 0,\n        retry: 0,\n        steps: [],\n        stderr: [],\n        stdout: [],\n        startTime: this.globalStartTime,\n        annotations: [],\n      });\n    }\n  }\n\n  async onEnd() {\n    await this.addSkippedResults();\n\n    this.allureRuntime!.writeEnvironmentInfo();\n    this.allureRuntime!.writeCategoriesDefinitions();\n  }\n\n  printsToStdio(): boolean {\n    return false;\n  }\n\n  private processStepMetadataMessage(attachmentStepUuid: string, message: RuntimeStepMetadataMessage) {\n    const { name, parameters = [] } = message.data;\n\n    this.allureRuntime!.updateStep(attachmentStepUuid, (step) => {\n      if (name) {\n        step.name = name;\n      }\n\n      step.parameters.push(...parameters);\n    });\n  }\n\n  private async processAttachment(\n    testUuid: string,\n    attachmentStepUuid: string | undefined,\n    attachment: {\n      name: string;\n      contentType: string;\n      path?: string;\n      body?: Buffer;\n    },\n  ) {\n    if (!attachment.body && !attachment.path) {\n      return;\n    }\n\n    const allureRuntimeMessage = attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE;\n\n    if (allureRuntimeMessage && !attachment.body) {\n      return;\n    }\n\n    if (allureRuntimeMessage) {\n      const message = JSON.parse(attachment.body!.toString()) as RuntimeMessage;\n\n      if (message.type === \"step_metadata\") {\n        this.processStepMetadataMessage(attachmentStepUuid!, message);\n        return;\n      }\n\n      this.allureRuntime!.applyRuntimeMessages(testUuid, [message]);\n      return;\n    }\n\n    const parentUuid = this.allureRuntime!.startStep(testUuid, attachmentStepUuid, { name: attachment.name });\n\n    // only stop if step is created. Step may not be created only if test with specified uuid doesn't exists.\n    // usually, missing test by uuid means we should completely skip result processing;\n    // the later operations are safe and will only produce console warnings\n    if (parentUuid) {\n      this.allureRuntime!.stopStep(parentUuid, undefined);\n    }\n\n    if (attachment.body) {\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.body, {\n        contentType: attachment.contentType,\n      });\n    } else if (!existsSync(attachment.path!)) {\n      return;\n    } else {\n      const contentType =\n        attachment.name === \"trace\" && attachment.contentType === \"application/zip\"\n          ? \"application/vnd.allure.playwright-trace\"\n          : attachment.contentType;\n\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.path!, {\n        contentType,\n      });\n    }\n\n    if (!attachment.name.match(diffEndRegexp)) {\n      return;\n    }\n\n    const pathWithoutEndFromSnapshotDir = attachment\n      .path!.replace(this.outputDir!, this.snapshotDir!)\n      ?.replace(diffEndRegexp, \"\")\n      .replace(/\\.png/, \"\");\n\n    const pathWithoutEnd = attachment.path!.replace(diffEndRegexp, \"\").replace(/\\.png/, \"\");\n\n    if (this.processedDiffs.includes(pathWithoutEnd) || this.processedDiffs.includes(pathWithoutEndFromSnapshotDir)) {\n      return;\n    }\n    const fileExists = async (filePath: string) => {\n      return await access(filePath)\n        .then(() => true)\n        .catch(() => false);\n    };\n\n    const readImageFromDirs = async (modifier: \"actual\" | \"expected\" | \"diff\") => {\n      const defaultPath = `${pathWithoutEnd}-${modifier}.png`;\n      const snapshotPath = `${pathWithoutEndFromSnapshotDir}-${modifier}.png`;\n      if (await fileExists(defaultPath)) {\n        return await readImageAsBase64(defaultPath);\n      }\n      if (await fileExists(snapshotPath)) {\n        return await readImageAsBase64(snapshotPath);\n      }\n      return undefined;\n    };\n\n    const actualBase64 = await readImageFromDirs(\"actual\");\n    const expectedBase64 = await readImageFromDirs(\"expected\");\n    const diffBase64 = await readImageFromDirs(\"diff\");\n\n    const diffName = attachment.name.replace(diffEndRegexp, \"\");\n\n    this.allureRuntime!.writeAttachment(\n      testUuid,\n      undefined,\n      diffName,\n      Buffer.from(\n        JSON.stringify({\n          expected: expectedBase64,\n          actual: actualBase64,\n          diff: diffBase64,\n          name: diffName,\n        } as ImageDiffAttachment),\n        \"utf-8\",\n      ),\n      {\n        contentType: ContentType.IMAGEDIFF,\n        fileExtension: \".imagediff\",\n      },\n    );\n\n    this.processedDiffs.push(pathWithoutEnd);\n  }\n\n  version(): \"v2\" {\n    return \"v2\";\n  }\n}\n\n/**\n * @deprecated for removal, import functions directly from \"allure-js-commons\".\n */\nexport const allure = allurePlaywrightLegacyApi;\n\n/**\n * @deprecated for removal, import functions directly from \"@playwright/test\".\n */\nexport { test, expect } from \"@playwright/test\";\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}